# -*- coding: utf-8 -*-
"""MNIST-CNN-keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14tNgpWQQ-ke76e5MbB6JfdtrZaXgeCxa

# MNIST with Keras

We will go through the following steps:
1. Importing libraries and the dataset
2. Data preparation
3. Building and understanding CNN architecture
4. Fitting and evaluating the model

## 1. Importing libraries and the dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# Utils
import numpy as np
import pandas as pd
import random
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Sklearn
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Tensorflow and keras
import keras
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D
from IPython.display import SVG
from keras.utils import plot_model, model_to_dot
from keras.datasets import mnist
from keras import backend as K

# Parameters

IMG_ROWS = 28
IMG_COLS = 28
NUM_CLASSES = 10
TEST_SIZE = 0.2
RANDOM_STATE = 42

# Model
NO_EPOCHS = 20
BATCH_SIZE = 128
VERBOSE = 1
PATIENCE = 20

# load the dataset into test and train sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

print("x_train shape:", x_train.shape, "y_train shape:", y_train.shape)

# Get class distribution

print(pd.Series(y_train).value_counts())

"""## 2. Data preparation

We will get only 20k images for training, to save time.
"""

# get only 20k images for training
idx = np.random.randint(x_train.shape[0], size=20000)
x_train = x_train[idx, :]
y_train = y_train[idx]

"""We need to reshape `x_train` from shape `(2000, 28, 28)` to `(2000, 28, 28, 1)`. Same for `x_test`.

"""

x_train = x_train.reshape(x_train.shape[0], IMG_ROWS, IMG_COLS, 1)
x_test = x_test.reshape(x_test.shape[0], IMG_ROWS, IMG_COLS, 1)
print(x_train.shape)
print(x_test.shape)